
#include <mcs51/8051.h>
// Last Revision:  October 4, 2009
#include <at89c51ed2.h>  //also includes 8052.h and 8051.h
#include <mcs51reg.h>
//#include <8052.h>   // also included in at89c51ed2.h
#include <stdio.h>
#include <stdlib.h>


void putstr1 (char *s);

volatile int gg;  // global
#include <malloc.h>
#define HEAP_SIZE 0x300

   // size must be smaller than available XRAM
unsigned char  heap[HEAP_SIZE];

char * getstr();
char getchar ();
void putchar (char c);
char data_get[50];


// compiler flags
// -c -mmcs51 --std-sdcc99 --verbose --model-large

// linker flags for C501 with code in SRAM at 0x6000 and data in SRAM at 0xC000
// --code-loc 0x6000 --code-size 0x6000 --xram-loc 0xC000 --xram-size 0x0400 --model-large --out-fmt-ihx

// linker flags for AT89C51RC2 with code in Flash at 0x0000 and data in internal XRAM at 0x0000
// --code-loc 0x0000 --code-size 0x8000 --xram-loc 0x0000 --xram-size 0x400 --model-large --out-fmt-ihx

// linker flags for AT89C51RC2 with code in Flash at 0x0000 and data in internal/external XRAM at 0x0000
// --code-loc 0x0000 --code-size 0x8000 --xram-loc 0x0000 --xram-size 0x8400 --model-large --out-fmt-ihx

// All processor XRAM should be enabled before the call to main().
// This can be done in a user supplied _sdcc_external_startup() function.
// See section 3.11.1 of sdccman.pdf for SDCC revision 2.6.0.




_sdcc_external_startup()
{
    AUXR |= 0x0C;
    TMOD=0x20; //use Timer 1, mode 2
    TH1=0xFA; //4800 baud rate
    SCON=0x50;
    TR1=1;
    TI=1;
    return 0;
}

char getchar ()
{
//	char cc;
//    while (!RI);                // compare asm code generated for these three lines
//    while ((SCON & 0x01) == 0);  // wait for character to be received, spin on RI
	while (RI == 0);
	RI = 0;			// clear RI flag
	return SBUF;  	// return character from SBUF
}

void putchar (char c)
{
//	while (!TI);				// compare asm code generated for these three lines
	while (TI == 0);
//	while ((SCON & 0x02) == 0);    // wait for TX ready, spin on TI
	SBUF = c;  	// load serial port with transmit value
	TI = 0;  	// clear TI flag
}

char * getstr()
{
	char *s=0;
	char c;
	int i=0;
	c = getchar();
	while( c !='\r' && c !='\0')
	{
		//(*(s+i)) = c;
		data_get[i]=c;
		//putchar1(data_get[i]);
		//putchar(data_get[i]);
		i++;
		c = getchar();
	}
	//*(s+i)='\0';
	 data_get[i]='\0';
	//putstr1(data_get);
	//putstr1(data_get);
	s=data_get;
	*(s+i)='\0';
	//putstr1(s);
	return s;
}

void putstr1 (char *s)
{
	int i = 0;
	while (*(s+i)!='\0')
		{			// output characters until NULL found
		putchar(*(s+i));
		i++;
	}

	//putchar1(*s);
	//putchar('\n');
	//return i+1;
}

int size_cal()
{
    char *size1;
    unsigned int i,result=0;
    i=0;
    size1= getstr();
	putstr1(size1);
	while(*(size1+i)!='\0')
    {
      result = (result * 10) + ( *(size1+i)- '0' );
      i++;
    }
    //printf("num value is %d\n\r",result);
    return result;
}

/*
void buff_shift(char array[],unsigned int r,unsigned int t)
{
    int m=0;
    printf_tiny("%d",t);
    for(m=r;m<t+1;m++)
    {
      array[m]=array[m+1];
    }
    //r--;
}
*/

void main()
{
	 unsigned int res=0,k=2,l=0,y=0,w=0;
	 unsigned int m=0;
	 unsigned int u=2;
	 unsigned int t=0,g=0;
     xdata unsigned char * buffer[125];
    unsigned char zz=0;
    unsigned int pp[125];
   // unsigned int ss[125];
    unsigned int ff=0;
        int temp[125];
    unsigned int num_items=0;
    int cmd_first=0,cmd_last=0;
    int stg_first=0,stg_last=0;

    init_dynamic_memory((MEMHEADER xdata *)heap, HEAP_SIZE);

    sec1:
     do{
	printf("Enter a buffer size between 32 and 2400 and divisible by 8\n\r");
//	printf_small("Enter the buffer size between 32 and 2400 bytes");

	res=size_cal();
//	zz = 1;
        do
        {
         if (res>2400||res<32||res%8!=0)
         {
        printf_tiny("Enter a valid input\n\r");
        res=size_cal();
         }
         else
         {
             break;
         }
        }while (res>2400||res<32||res%8!=0);



        if((buffer[0]=malloc((unsigned int)(res)))==0)
        printf_tiny("malloc buffer0 failed\n\r");

        if((buffer[1]=malloc((unsigned int)(res)))==0)
        {
          printf_tiny("malloc buffer1 failed\n\r");
          free(buffer[0]);
        }
    } while((buffer[0]==0)||(buffer[1]==0));

    printf_tiny("\n\rAllocation Successful\n\r");
    pp[0]=res;
    pp[1]=res;
    //ss[0]=res;
    //ss[1]=res;
    temp[0] = (int) buffer[0];
    temp[1] = (int) buffer[1];
    //printf_tiny ("Size is %d",pp[0]);
    //printf_tiny ("Size is %d",pp[1]);

  while(1){
    printf_tiny("\n\rEnter lowercase or number characters to add to buffer\n\r");
    /*printf_tiny("\n\r + to add buffer\n\r");
    printf_tiny("\n\r - to delete buffer\n\r");
    printf_tiny("\n\r ? for buffer report\n\r");
    printf_tiny("\n\r @ to free the heap\n\r");
    printf_tiny("\n\r = for hex dump\n\r");*/
    zz=getchar();
    putchar(zz);
    if((zz>='0'&& zz<= '9')||(zz>='a'&& zz<= 'z'))
    {
        if(w<res)
        {
        *(buffer[0]+w)=zz;
          w++;
        }
         else
         {
            ;
         }
        //printf("element is");
        //putstr1((buffer[0]+w));
       //num_items ++;
    }
    else
    {
      cmd_first ++;
    switch(zz)
    {
     case '+':
        printf("\n");

     //cmd_cnt++;
     printf_tiny("\rEnter a buffer size between 20 and 400\n\r");
     pp[u]= size_cal();

     do
     {
     if(pp[u]>400||pp[u]<20)
      {
          printf_tiny("\rEnter a valid input\n\r");
          pp[u]= size_cal();
      }
     }while(pp[u]>400||pp[u]<20);

        //printf_tiny("Value of k is %d",k);
     if((buffer[k]= malloc((unsigned int)pp[u]))==0)
     {
         printf_tiny("\n\rMalloc allocation failed for buffer[%d]\n\r",k);
     }
       printf_tiny("\n\rMalloc allocation successful for buffer[%d]\n\r",k);
       temp[k]=(int)buffer[k];
       //printf_tiny("Start address of new buffer created is %d\n\r",temp[k]);

       /*for(y=0;y<=k;y++)
       {
         printf_tiny("%d\t",temp[y]);
       }
       printf_tiny("\n");
       for(y=0;y<=k;y++)
       {
           printf_tiny("%d\t",pp[y]);
       }
       */
       //ss[u+2]=pp[u+2];
       k++;
       u++;
       break;
     case '-':
         printf("\n");
        //cmd_cnt++;
        printf_tiny("\rEnter a buffer number to be freed\n\r");
        ff=size_cal();
        do
        {  if((ff==0)||(ff>k))
          {
         printf_tiny("Enter a number other than 0 and a valid buffer number\n\r");
         ff=size_cal();
          }
         else
         {
           free(buffer[ff]);
           buffer[ff]=NULL;
           //printf_tiny("temp address is %d",buffer[ff]);
           for(m=ff;m<k;m++)
           {
               buffer[m]=buffer[m+1];
               temp[m]=temp[m+1];
                pp[m]=pp[m+1];
           }
           k--;
           u--;
           printf_tiny("Buffer[%d] freed successfully\n\r",ff);
           //printf_tiny("Value of k is %d",k);
           break;
         }
        } while ((ff==0)||(ff>k));
        break;
     case '?':
         printf("\n");
        //cmd_cnt++;
        stg_first=w;
        printf_tiny("Total number of buffers in the heap are %d\n\r",k);
        printf_tiny("Information about each buffer in the heap is as follows\n\r");
        printf_tiny("Buffer Number\t\tBuffer Start Address\t\tBuffer End Address\t\tBuffer Size\n\r");
        for(y=0;y<k;y++)
        {
          printf_tiny("   %d\t\t\t\t%d\t\t\t\t%d\t\t\t    %d\n\r",y,temp[y],(temp[y]+pp[y]),pp[y]);
        }
        //printf_tiny("")
        /*
        for(y=0;y<k;y++)
        {
        printf_tiny("Buffer Start Address:%d\n\r",temp[y]);
        }
        for(y=0;y<k;y++)
        {
          printf_tiny("Buffer end address:%d\n\r",temp[y]+pp[y]);
        }
        for(y=0;y<k;y++)
        {
          printf_tiny("Buffer Sizes:%d\n\r",pp[y]);
        }
         */
        printf_tiny("Number of Storage Characters:%d\n\r",cmd_first);
        printf_tiny("Number of free spaces in the buffer:%d\n\r",res-w);
        printf_tiny("Number of Storage characters since last entry of ?:%d\n\r",stg_first-stg_last);
        printf_tiny("Number of total characters since last entry of ?:%d\n\r",cmd_first-cmd_last);
        stg_last=w;
        cmd_last++;
        printf_tiny("Buffer0 contents are as follows and now it is being emptied\n\r");
        for(y=0;y<w;y++)
        {
          putchar(*(buffer[0]+y));
          printf(" ");
          l=y;
          if((l!=0)&&(l%31==0))
          {
              printf_tiny("\n\r");
          }
        }
        for(y=0;y<w;y++)
        {
            *(buffer[0]+y)='\0';
        }
        break;
     case '=':
         printf("\n\r");
         printf("%04x:",temp[g]);
        //cmd_cnt++;
        for(y=0;y<w;y++)
        {
          //putchar(*(buffer[0]+y)-0x30);
          printf_tiny("%x ",(*(buffer[0]+y)));
          printf(" ");
          if((y+1)%16==0)
          {
            printf("\n\r");
            printf("%04x:",temp[g]+16);
          }
        }
        break;
     case '@':
        printf("\n");
        printf_tiny("All buffers are being freed\n\r");
        for(y=0;y<k;y++)
        {
            free(buffer[y]);
            buffer[y]=NULL;
        }
         goto sec1;
         break;
         default:
        printf_tiny("\n\rInvalid Input");
        break;
    }
    //break1:goto break2;
  }
     // break2: goto break3;
  } //while ((zz=='+')||(zz=='-')||(zz=='?')||(zz=='@')||(zz=='=')||(zz>='0'&& zz<= '9')||(zz>='a'&& zz<= 'z'));
  //break3: goto sec1;
}







